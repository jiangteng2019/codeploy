"use strict";var e=require("path"),o=require("fs"),r=require("archiver"),s=require("os"),n=require("ssh2");require("process");const c=o,t=r,l=e;function i(e){["host","port","username","localFolder","remoteFolder"].forEach((o=>{if(!(o in e))throw new Error(`${o} field required`)}));const o=["privateKey","password","passphrase"];if(!(o[0]in e)&&!(o[1]in e)&&!(o[2]in e))throw new Error("Please provide a log in credentials");return!0}var a={loadConfig:function(){const e=function(){const e=l.join(process.cwd(),"package.json"),o=l.join(process.cwd(),"codeploy.config.js");let r=null;try{let o=require(e).codeploy;if(o)return r=o,r}catch(e){console.error("Unable to load codeploy config",e)}try{return r=require(o),r}catch(e){console.error("Unable to load codeploy config",e)}return!1}();return"[object Object]"===Object.prototype.toString.call(e)&&i(e)?(e.localFolder=l.join(process.cwd(),e.localFolder),[e]):Array.isArray(e)?(e.forEach((e=>i(e))),e.map((e=>({...e,localFolder:l.join(process.cwd(),e.localFolder)})))):void 0},compressFiles:function(e){try{if(!e)throw new Error("The folder must be specified");if(!c.existsSync(e))throw new Error("The compressed folder does not exist");const o="app-dist-"+Date.now()+".zip",r=c.createWriteStream(o),s=t("zip",{zlib:{level:9}});return r.on("close",(function(){console.log(`Archive created: ${e} (${s.pointer()} total bytes)`)})),s.pipe(r),s.directory(e,!1),s.finalize(),o}catch(e){throw console.error(e),new Error(e)}},uploadFile:function(e,o,r){return new Promise(((s,n)=>{e.sftp(((e,c)=>{e&&n(e),c.fastPut(o,r,{},(e=>{e&&n(e),console.log("upload success"),s()}))}))}))},decompressServerFile:function(e,o,r){return new Promise(((s,n)=>{const c=`unzip -o ${o} -d ${r}`;e.exec(c,((e,o)=>{if(e)throw e;o.on("close",((e,o)=>{console.log(`Stream closed with code: ${e}, signal: ${o}`),0===e?(console.log("decompress success"),s()):n()})),o.on("data",(e=>{console.log("    STDOUT: "+e)})),o.stderr.on("data",(e=>{console.error("STDERR: "+e)}))}))}))},clearLocalFile:function(e){c.existsSync(e)?(c.rmSync(e),console.log("clean local file success")):console.log("File does not exist")},clearRemoteFile:function(e,o){return new Promise(((r,s)=>{const n=`rm -f ${o}`;e.exec(n,((o,n)=>{if(o)throw o;n.on("close",((o,n)=>{console.log(`Stream closed with code: ${o}, signal: ${n}`),0===o?(console.log("clean remote file success"),r()):s(),e.end()})),n.on("data",(e=>{console.log("STDOUT: "+e)})),n.stderr.on("data",(e=>{console.error("STDERR: "+e)}))}))}))}};const d=o,p=s,u=e,{Client:f}=n,h=p.homedir(),w=u.join(h,".ssh","id_rsa"),g=new f;var m={logInWithSSH:function(e){return new Promise(((o,r)=>{const{host:s,port:n,username:c,password:t,privateKey:l,passphrase:i}=e;g.connect({host:s,port:n||22,username:c||"root",password:t,privateKey:l||d.readFileSync(w),passphrase:i}),g.on("ready",(()=>{console.log("Client :: ready"),o(g)})),g.on("error",(e=>{console.error(`Connection error: ${e}`),r(e)}))}))}};const y=e,{loadConfig:F,compressFiles:S,uploadFile:$,decompressServerFile:v,clearLocalFile:j,clearRemoteFile:E}=a,{logInWithSSH:q}=m,b=F();async function x(e){try{const{localFolder:o,remoteFolder:r}=e,s=await q(e),n=S(o),c=y.join(process.cwd(),n),t=`${r}/${n}`;await $(s,c,t),await v(s,t,r),j(c),await E(s,t),console.log(`upload files to ${e.host} ${r} success`)}catch(e){console.log(e),console.log("Execution failed")}}!async function(){for(let e=0;e<b.length;e++)await x(b[e])}(),module.exports={};
